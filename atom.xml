<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Something]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://iamcc.github.io/"/>
  <updated>2016-01-21T10:22:04.000Z</updated>
  <id>http://iamcc.github.io/</id>
  
  <author>
    <name><![CDATA[CC]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[忘关烤箱了？我用 Python 和 OpenCV 来帮忙！]]></title>
    <link href="http://iamcc.github.io/2016/01/21/%E5%BF%98%E5%85%B3%E7%83%A4%E7%AE%B1%E4%BA%86%EF%BC%9F%E6%88%91%E7%94%A8-Python-%E5%92%8C-OpenCV-%E6%9D%A5%E5%B8%AE%E5%BF%99%EF%BC%81/"/>
    <id>http://iamcc.github.io/2016/01/21/忘关烤箱了？我用-Python-和-OpenCV-来帮忙！/</id>
    <published>2016-01-21T10:19:26.000Z</published>
    <updated>2016-01-21T10:22:04.000Z</updated>
    <content type="html"><![CDATA[<p>“我忘关烤箱了吗？”</p><br><p><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebjw1f02hik54daj206k08pmxh.jpg"></p><br><p>这个问题常常会在最不方便的时候出现在你的脑子里。</p><br><p>有时是当你刚刚走出家门的时候。 有时是当你在上班路上的时候。 有时是当你坐在飞机上准备度个长假的时候……</p><br><p>解决这个问题的方法是多种多样的：</p><br><ol><br><li><a href="http://www.apartmenttherapy.com/did-i-leave-the-oven-on-try-th-131769" target="_blank" rel="external">橡皮筋的方法</a></li><br><li>大声说或唱出来（就像&nbsp;<a href="https://www.youtube.com/watch?v=vPN4XjrwD78" target="_blank" rel="external">Samuel L. Jackson</a> 一样）</li><br><li>当你离开家去度假的时候，给烤箱在内的电器列个清单或做个标记。 或者，我们也许有更好的做法……</li><br></ol><br><p>在本教程中，我们会尝试利用技术手段解决这个问题。</p><br><p><a href="https://github.com/kazuar/opencv_light_detection" target="_blank" rel="external">Github</a>&nbsp;里有完整代码。</p><br><h2><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 24px;font-style: normal;font-weight: normal;line-height: 36px">问题定义</span></h2><br><p><span style="font-weight: normal">对我们而言，我们需要确定一个信号，用于判断烤箱的开关状态。在我的厨房里，这个信号就是顶部标记着“烤箱开”字样的红色灯。</span></p><br><p>当红色灯亮的时候，烤箱是开着的：</p><br><p><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1f02hlt7x8fj208i0bcjsd.jpg"></p><br><p>当红色灯灭的时候，烤箱是关着的：</p><br><p><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebjw1f02hilvgtkj208i0bcmy5.jpg"></p><br><h2><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 24px;font-style: normal;font-weight: normal;line-height: 36px">预备条件</span></h2><br><p>确保你的电脑上安装了以下应用：</p><br><ol><br><li>OpenCV 3.0</li><br><li>Python 2.7</li><br><li>Numpy 1.9</li><br></ol><br><h3><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 20px;font-style: normal;font-weight: normal;line-height: 30px">安装 OpenCV3.0 和 Python 2.7</span></h3><br><p>如果你尚未安装 OpenCV，请按照 Adrian Rosebrock 的完美教程，在 OSX 系统上安装 OpenCV 3.0 和 Python 2.7+。我在安装步骤里增加了一些自己的注释，以防你在 OSX 上编译 OpenCV 3.0时遇到问题。</p><br><h2><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 24px;font-style: normal;font-weight: normal;line-height: 36px">步骤</span></h2><br><p>如果你已经成功在你的环境中安装了 OpenCV，我们就可以开始判断烤箱开关的数据分析了。</p><br><h3><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 20px;font-style: normal;font-weight: normal;line-height: 30px">加载需要的包</span></h3><br><ol><br><li>argparse —— 参数处理库。</li><br><li>numpy —— 高度优化的数值运算库。OpenCV 在数组结构中使用 numpy。</li><br><li>cv2 —— OpenCV 中图像处理库。</li><br></ol><br><p></p><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f841237744620" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码" style="display: none;"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;">import argparse<br>import numpy as np<br>import cv2</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f841237744620-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f841237744620-2">2</div><div class="crayon-num" data-line="crayon-56a04cc39f841237744620-3">3</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f841237744620-1"><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-k ">argparse</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f841237744620-2"><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">numpy </span><span class="crayon-st">as</span><span class="crayon-h"> </span><span class="crayon-e">np</span></div><div class="crayon-line" id="crayon-56a04cc39f841237744620-3"><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0088 seconds] --><br><p></p><br><h3><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 20px;font-style: normal;font-weight: normal;line-height: 30px">载入图片</span></h3><br><p></p><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f855379211789" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码" style="display: none;"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;">image = cv2.imread(image_path)</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f855379211789-1">1</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f855379211789-1"><span class="crayon-v">image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">imread</span><span class="crayon-sy">(</span><span class="crayon-v">image_path</span><span class="crayon-sy">)</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0013 seconds] --><br><p></p><br><h3><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 20px;font-style: normal;font-weight: normal;line-height: 30px">图片降噪</span></h3><br><p>我们为了给图片降噪，需要对输入图片进行平滑处理。这样会更容易在图片中定位目标。使用 medianBlur 函数，把光圈大小定为 3 。数字越大意味着图像会越模糊。</p><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f85d142186390" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码" style="display: none;"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;">blur_image = cv2.medianBlur(image, 3)</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f85d142186390-1">1</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f85d142186390-1"><span class="crayon-v">blur_image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">medianBlur</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">3</span><span class="crayon-sy">)</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0015 seconds] --><br><p></p><br><h3><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 20px;font-style: normal;font-weight: normal;line-height: 30px">把图片颜</span>色转为 HSV&nbsp;格式</h3><br><p>HSV —— 色度、饱和度和纯度（亮度）。HSV 可以让我们提取出一个彩色对象，因为它比 BGR 格式（译者注：与我们常说的RBG色彩模型类似，三个字母分别代表红蓝绿三色）更容易表征颜色。</p><br><p>把图片转为 HSV 格式可以让我们通过色度（一个值而不是三个值），来确定图片中的一个颜色。</p><br><p>以下是实现方式：</p><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f864572895714" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码" style="display: none;"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;">hsv_image = cv2.cvtColor(blur_image, cv2.COLOR_BGR2HSV)</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f864572895714-1">1</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f864572895714-1"><span class="crayon-v">hsv_image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">cvtColor</span><span class="crayon-sy">(</span><span class="crayon-v">blur_image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-v">COLOR_BGR2HSV</span><span class="crayon-sy">)</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0015 seconds] --><br><p>执行结果如下图：</p><br><p><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebjw1f02hikyfi4j209k0crgn0.jpg"></p><br><h3>检测图<span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 20px;font-style: normal;font-weight: normal;line-height: 30px">片中的颜色</span></h3><br><p>为了检测我们想要的颜色，我们可以查看烤箱灯图片中颜色的直方图。</p><br><p><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1f02hk1zbz5j20dl09hq3c.jpg">&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebjw1f02hilbk3pj205h05i74s.jpg"></p><br><p>我们可以看出，红色在图片中占统治地位。红色有两个高峰 —— 一个幅度高，一个幅度低。这些颜色值转变为色度范围从 0 到10，以及从 160 到 180 （针对红色）。</p><br><p>在 HSV 图片中针对每一个色度范围，我们可以创建一个遮罩，来去掉所有不在选定范围的无关颜色。</p><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f86b923457064" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;">def create_hue_mask(image, lower_color, upper_color):<br>    lower = np.array(lower_color, np.uint8)<br>    upper = np.array(upper_color, np.uint8)<br><br>    # Create a mask from the colors<br>    mask = cv2.inRange(image, lower, upper)<br>    output_image = cv2.bitwise_and(image, image, mask = mask)<br>    return output_image<br><br># Get lower red hue<br>lower_red_hue = create_hue_mask(hsv_image, [0, 100, 100], [10, 255, 255])<br><br># Get higher red hue<br>higher_red_hue = create_hue_mask(hsv_image, [160, 100, 100], [179, 255, 255])</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f86b923457064-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f86b923457064-2">2</div><div class="crayon-num" data-line="crayon-56a04cc39f86b923457064-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f86b923457064-4">4</div><div class="crayon-num" data-line="crayon-56a04cc39f86b923457064-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f86b923457064-6">6</div><div class="crayon-num" data-line="crayon-56a04cc39f86b923457064-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f86b923457064-8">8</div><div class="crayon-num" data-line="crayon-56a04cc39f86b923457064-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f86b923457064-10">10</div><div class="crayon-num" data-line="crayon-56a04cc39f86b923457064-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f86b923457064-12">12</div><div class="crayon-num" data-line="crayon-56a04cc39f86b923457064-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f86b923457064-14">14</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f86b923457064-1"><span class="crayon-r">def</span><span class="crayon-h"> </span><span class="crayon-e">create_hue_mask</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">lower_color</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">upper_color</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f86b923457064-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">lower</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-k ">array</span><span class="crayon-sy">(</span><span class="crayon-v">lower_color</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-v">uint8</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-56a04cc39f86b923457064-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">upper</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-k ">array</span><span class="crayon-sy">(</span><span class="crayon-v">upper_color</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-v">uint8</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f86b923457064-4">&nbsp;</div><div class="crayon-line" id="crayon-56a04cc39f86b923457064-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c"># Create a mask from the colors</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f86b923457064-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">mask</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">inRange</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">lower</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">upper</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-56a04cc39f86b923457064-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">output_image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">bitwise_and</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">mask</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">mask</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f86b923457064-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">output_image</span></div><div class="crayon-line" id="crayon-56a04cc39f86b923457064-9">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f86b923457064-10"><span class="crayon-c"># Get lower red hue</span></div><div class="crayon-line" id="crayon-56a04cc39f86b923457064-11"><span class="crayon-v">lower_red_hue</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">create_hue_mask</span><span class="crayon-sy">(</span><span class="crayon-v">hsv_image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-cn">10</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">255</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">255</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f86b923457064-12">&nbsp;</div><div class="crayon-line" id="crayon-56a04cc39f86b923457064-13"><span class="crayon-c"># Get higher red hue</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f86b923457064-14"><span class="crayon-v">higher_red_hue</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">create_hue_mask</span><span class="crayon-sy">(</span><span class="crayon-v">hsv_image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-cn">160</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-cn">179</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">255</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">255</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0046 seconds] --><br><p>结果如下：</p><br><p><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebjw1f02hijyo8lj209k0cr0sn.jpg"><br><br><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebjw1f02hijjof0j209k0crt8n.jpg"></p><br><p>接下来把这些图片合并在一起，以抓取所有红色色度。</p><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f872889901749" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码" style="display: none;"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;">full_image = cv2.addWeighted(lower_red_hue, 1.0, higher_red_hue, 1.0, 0.0)</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f872889901749-1">1</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f872889901749-1"><span class="crayon-v">full_image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">addWeighted</span><span class="crayon-sy">(</span><span class="crayon-v">lower_red_hue</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1.0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">higher_red_hue</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1.0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0.0</span><span class="crayon-sy">)</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0011 seconds] --><br><p>结果如下：</p><br><p><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebjw1f02hija3c6j209k0crmx0.jpg"></p><br><h3><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 20px;font-style: normal;font-weight: normal;line-height: 30px">发现图片中的圆圈</span></h3><br><p>现在我们的图片上仅有红色色度，接着我们需要判定红灯是否开启（即是否存在红色色度的那个圆圈）。我们需要在新图中发现圆圈，不过首先需要把图片转换成灰度图（因为 HoughCircles 函数的输入要求是灰度图）。</p><br><p>检测图片中的圆圈需要以下参数（使用 OpenCV中 的 HoughCircles 函数）：</p><br><ol><br><li>灰度图输入。</li><br><li>HOUGH_GRADIENT 是用来检测圆圈的方法（目前仅有的一个方法）。</li><br><li>累加器和图片分辨率的反比。在本例中，为1.2。</li><br><li>待检测圆圈圆心的最小距离，本例中为100。<br><br><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f879958970608" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码" style="display: none;"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;">#Convert image to grayscale<br>image_gray = cv2.cvtColor(full_image, cv2.COLOR_BGR2GRAY)<br>#Find circles in the image<br><br>circles = cv2.HoughCircles(image_gray, cv2.HOUGH_GRADIENT, 1.2, 100)</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f879958970608-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f879958970608-2">2</div><div class="crayon-num" data-line="crayon-56a04cc39f879958970608-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f879958970608-4">4</div><div class="crayon-num" data-line="crayon-56a04cc39f879958970608-5">5</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f879958970608-1"><span class="crayon-c">#Convert image to grayscale</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f879958970608-2"><span class="crayon-v">image_gray</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">cvtColor</span><span class="crayon-sy">(</span><span class="crayon-v">full_image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-v">COLOR_BGR2GRAY</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-56a04cc39f879958970608-3"><span class="crayon-c">#Find circles in the image</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f879958970608-4">&nbsp;</div><div class="crayon-line" id="crayon-56a04cc39f879958970608-5"><span class="crayon-v">circles</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">HoughCircles</span><span class="crayon-sy">(</span><span class="crayon-v">image_gray</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-v">HOUGH_GRADIENT</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1.2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">)</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0015 seconds] --><br><br></li><br></ol><br><h2><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 24px;font-style: normal;font-weight: normal;line-height: 36px">结果</span></h2><br><p>此时就可以检查是否有圆圈了。如果有就意味着至少有一个烤箱灯亮着。如果找不到圆圈就意味着没有灯亮，烤箱关着。</p><br><p>为了证明此结论，我们可以用下述代码在原图中画圆圈：</p><!-- Crayon Syntax Highlighter v2.7.1 --><br><br>        <div id="crayon-56a04cc39f880129959472" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" touchscreen minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 13px !important; line-height: 15px !important; height: auto;"><br><br>            <div class="crayon-toolbar" data-settings=" show" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><span class="crayon-title"></span><br>            <div class="crayon-tools" style="font-size: 13px !important;height: 19.5px !important; line-height: 19.5px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="切换是否显示行编号"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="纯文本显示代码"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="切换自动换行"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="点击展开代码" style="display: none;"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div><br>            <div class="crayon-info" style="min-height: 18.2px !important; line-height: 18.2px !important;"></div><br>            <div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" style="tab-size: 4; font-size: 13px !important; line-height: 15px !important; z-index: 0; opacity: 0;"># Draw the circles on the original image<br>circles = np.round(circles[0, :]).astype(“int”)<br>for (center_x, center_y, radius) in circles:<br>    cv2.circle(image, (center_x, center_y), radius, (0, 255, 0), 4)</textarea></div><br>            <div class="crayon-main" style="position: relative; z-index: 1;"><br>                <table class="crayon-table" style=""><br>                    <tbody><tr class="crayon-row"><br>                <td class="crayon-nums " data-settings="show"><br>                    <div class="crayon-nums-content" style="font-size: 13px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-56a04cc39f880129959472-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f880129959472-2">2</div><div class="crayon-num" data-line="crayon-56a04cc39f880129959472-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-56a04cc39f880129959472-4">4</div></div><br>                </td><br>                        <td class="crayon-code"><div class="crayon-pre" style="font-size: 13px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-56a04cc39f880129959472-1"><span class="crayon-c"># Draw the circles on the original image</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f880129959472-2"><span class="crayon-v">circles</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-k ">round</span><span class="crayon-sy">(</span><span class="crayon-v">circles</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-sy">.</span><span class="crayon-e">astype</span><span class="crayon-sy">(</span><span class="crayon-s">“int”</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-56a04cc39f880129959472-3"><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">center_x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">center_y</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">radius</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">circles</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-56a04cc39f880129959472-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">circle</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">center_x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">center_y</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">radius</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">255</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">4</span><span class="crayon-sy">)</span></div></div></td><br>                    </tr><br>                </tbody></table><br>            </div><br>        </div><br><!-- [Format Time: 0.0042 seconds] --><br><p>结果如下：</p><br><p><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1f02hlgabuvj209k0crjso.jpg"></p><br><h2><span style="font-family: 'Microsoft YaHei', 宋体, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size: 24px;font-style: normal;font-weight: normal;line-height: 36px">下一步</span></h2><br><p>接下来还有很多可以做的，比如：</p><br><ol><br><li>检测特定灯的开启，用以了解烤箱的真实状态。</li><br><li>建立一个服务以便远程检查烤箱状态。</li><br><li>把该功能加入树莓派（译者注：基于Linux的迷你开发板），我们就拥有可以警告烤箱关闭与否的小型设备。</li><br></ol><br><p>全部样例代码可以在 <a href="https://github.com/kazuar/opencv_light_detection" target="_blank">Github</a> 中找到。 <em>写于2015年，8月2日</em></p>



<pre><code>&lt;div class=&quot;post-adds&quot;&gt;
    &lt;span data-post-id=&quot;84127&quot; class=&quot; btn-bluet-bigger href-style vote-post-up   register-user-only &quot;&gt;&lt;i class=&quot;fa  fa-thumbs-o-up&quot;&gt;&lt;/i&gt; &lt;h10 id=&quot;84127votetotal&quot;&gt;2&lt;/h10&gt; 赞&lt;/span&gt;
    &lt;span data-book-type=&quot;1&quot; data-site-id=&quot;13&quot; data-item-id=&quot;84127&quot; data-item-type=&quot;1&quot; class=&quot; btn-bluet-bigger href-style bookmark-btn  register-user-only &quot;&gt;&lt;i class=&quot;fa fa-bookmark-o  &quot;&gt;&lt;/i&gt; 5 收藏&lt;/span&gt;

                &lt;a href=&quot;#article-comment&quot;&gt;&lt;span class=&quot;btn-bluet-bigger href-style hide-on-480&quot;&gt;&lt;i class=&quot;fa fa-comments-o&quot;&gt;&lt;/i&gt;  评论&lt;/span&gt;&lt;/a&gt;



    &lt;!-- JiaThis Button BEGIN --&gt;
    &lt;div class=&quot;jiathis_style_24x24&quot; style=&quot;display: inline-flex; position: relative; margin: 0; clear: both;float: right;&quot;&gt;
        &lt;a class=&quot;jiathis_button_tsina&quot; title=&quot;分享到新浪微博&quot;&gt;&lt;span class=&quot;jiathis_txt jtico jtico_tsina&quot;&gt;&lt;/span&gt;&lt;/a&gt;
        &lt;a class=&quot;jiathis_button_weixin&quot; title=&quot;分享到微信&quot;&gt;&lt;span class=&quot;jiathis_txt jtico jtico_weixin&quot;&gt;&lt;/span&gt;&lt;/a&gt;
        &lt;a class=&quot;jiathis_button_qzone&quot; title=&quot;分享到QQ空间&quot;&gt;&lt;span class=&quot;jiathis_txt jtico jtico_qzone&quot;&gt;&lt;/span&gt;&lt;/a&gt;
        &lt;a class=&quot;jiathis_button_fb hide-on-480&quot; title=&quot;分享到Facebook&quot;&gt;&lt;span class=&quot;jiathis_txt jtico jtico_fb&quot;&gt;&lt;/span&gt;&lt;/a&gt;
        &lt;a href=&quot;http://www.jiathis.com/share?uid=1745061&quot; class=&quot;jiathis jiathis_txt jiathis_separator jtico jtico_jiathis&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;

&lt;/div&gt;




    &lt;!-- BEGIN #author-bio --&gt;
</code></pre><div id="author-bio"><br><br>    <h3 class="widget-title"><br>    关于作者：<a target="_blank" href="http://www.jobbole.com/members/harjoogoo">顾星竹</a><br>    </h3><br>    <div class="alignleft"><br>        <a target="_blank" href="http://www.jobbole.com/members/harjoogoo"><br>            <img src="http://www.jobbole.com/wp-content/uploads/2015/11/d6b70250c4b138a086a36d3db4e39046.jpg"><br>        </a><br>    </div>

<pre><code>&lt;div class=&quot;author-bio-info&quot;&gt;

    &lt;span class=&quot;author-bio-info-block&quot;&gt;
        java程序员，hadoop程序员        &lt;/span&gt;
    &lt;span class=&quot;author-bio-info-block&quot;&gt;
        &lt;a href=&quot;http://www.jobbole.com/members/harjoogoo&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 个人主页&lt;/a&gt; · 
        &lt;a href=&quot;http://python.jobbole.com/author/harjoogoo/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot;&gt;&lt;/i&gt; 我的文章&lt;/a&gt;

         · &lt;a title=&quot;声望值&quot; target=&quot;_blank&quot; href=&quot;http://www.jobbole.com/members/harjoogoo/reputation/&quot;&gt;&lt;i class=&quot;fa fa-graduation-cap&quot;&gt;&lt;/i&gt; 19&lt;/a&gt;        &lt;/span&gt;
&lt;/div&gt;
&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;
</code></pre><p></p></div><p></p>
<p><a href="http://python.jobbole.com/84127/" target="_blank" rel="external">http://python.jobbole.com/84127/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>“我忘关烤箱了吗？”</p><br><p><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebjw1f02hik54daj206k08pmxh.jpg"></p><br><p>这个问题常常会在最不方便的时候出现在你的脑子]]>
    </summary>
    
      <category term="opencv" scheme="http://iamcc.github.io/tags/opencv/"/>
    
      <category term="python" scheme="http://iamcc.github.io/tags/python/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/tags/tech/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Babel下的ES6兼容性与规范]]></title>
    <link href="http://iamcc.github.io/2016/01/21/Babel%E4%B8%8B%E7%9A%84ES6%E5%85%BC%E5%AE%B9%E6%80%A7%E4%B8%8E%E8%A7%84%E8%8C%83/"/>
    <id>http://iamcc.github.io/2016/01/21/Babel下的ES6兼容性与规范/</id>
    <published>2016-01-21T10:10:55.000Z</published>
    <updated>2016-01-21T10:20:51.000Z</updated>
    <content type="html"><![CDATA[<div class="panel panel-border"><br>    <div class="inner topic"><br>      <div id="topic_content" class="topic_content"><br><br>          <div class="markdown-text"><br>              <blockquote><br>                  <p><span style="margin-left: 10px;">本文作者：imweb ouven</span><br>                      <span style="margin-left: 10px;">原文出处：<a href="http://imweb.io/topic/561f9352883ae3ed25e400f5" target="_blank" rel="external">imweb社区</a></span><br>                      <b style="margin-left: 10px;">未经同意，禁止转载</b><br>                      </p><br>              </blockquote><br>              <p>ES6标准发布后，前端人员也开发渐渐了解到了es6，但是由于兼容性的问题，仍然没有得到广泛的推广，不过业界也用了一些折中性的方案来解决兼容性和开发体系问题，但大家仍很疑惑，使用ES6会有哪些兼容性问题。</p><br><h4 id="-">一、兼容性问题现状</h4><br><p>  针对ES6的新特性兼容性问题，目前解决的方案是使用语法解析转换工具将es6语法转化为大部分浏览器识别的es5语法，通用的转化方案有babel，traceur，jsx，typescript，es6-shim。当然es6在服务器端也存在兼容性问题，这里由于只考虑到浏览器端的开发，暂不讨论。下面有一些常用的解决方案和兼容es6的兼容性比较~</p><br><blockquote><br><p><a href="https://github.com/babel/babel/issues/596" target="_blank">https://github.com/babel/babel/issues/596</a> (es6的兼容解决方案很多，这里只讨论最常用的几种)<br><a href="http://kangax.github.io/compat-table/es6/" target="_blank">http://kangax.github.io/compat-table/es6/</a></p><br></blockquote><br><p>考虑到解决方案的多样性，我么会着重考虑以下几个问题：<br>1，兼容性：是否能解决目前常见的所有语法兼容转换<br>2，易用性：能够很方便的接入到现有的开发构建体系中<br>3，通用性：业界有较大认可，目前没有很大问题<br>4，持续性：有较权威的团队维护，并能不断更新</p><br><p>  综合四点，我们仍然考虑使用babel作为我们的兼容性解决方案。即使以后需要更换，只需要更换更换工具就可以了，原有代码的写法可以不动。<br>  除了后面三点，我们可能比较关注babel处理es6时的兼容性问题。因为es6里面增加了较多的内容，转换为es5没有对应语法与之对应，所以使用时要尤为注意。为此也没有很好的方法进行判断，只能对于es6里的新增内容进行编译，判断是否可以转为es5语法。</p><br><h3 id="es6-babel-">ES6新特性在Babel下的兼容性列表</h3><br><table><br><thead><br><tr><br><th>ES6特性</th><br><th>兼容性</th><br></tr><br></thead><br><tbody><br><tr><br><td>箭头函数</td><br><td>支持</td><br></tr><br><tr><br><td>类的声明和继承</td><br><td>部分支持，IE8不支持</td><br></tr><br><tr><br><td>增强的对象字面量</td><br><td>支持</td><br></tr><br><tr><br><td>字符串模板</td><br><td>支持</td><br></tr><br><tr><br><td>解构</td><br><td>支持，但注意使用方式</td><br></tr><br><tr><br><td>参数默认值，不定参数，拓展参数</td><br><td>支持</td><br></tr><br><tr><br><td>let与const</td><br><td>支持</td><br></tr><br><tr><br><td>for of</td><br><td>IE不支持</td><br></tr><br><tr><br><td>iterator, generator</td><br><td>不支持</td><br></tr><br><tr><br><td>模块 module、Proxies、Symbol</td><br><td>不支持</td><br></tr><br><tr><br><td>Map，Set 和 WeakMap，WeakSet</td><br><td>不支持</td><br></tr><br><tr><br><td>Promises、Math，Number，String，Object 的新API</td><br><td>不支持</td><br></tr><br><tr><br><td>export &amp; import</td><br><td>支持</td><br></tr><br><tr><br><td>生成器函数</td><br><td>不支持</td><br></tr><br><tr><br><td>数组拷贝</td><br><td>支持</td><br></tr><br></tbody><br></table><br><p>在es6的新特性中，复杂结构的仍然不支持对es5转换的兼容，具体兼容性可以从下面实例来看~</p><br><h4 id="1-1-">1.1 箭头操作符</h4><br><p>箭头操作符可以简洁的描述一个函数</p><br><pre><code>// ES6<br>var fn= <span class="hljs-list">(<span class="hljs-keyword">v=&gt;console</span>.log<span class="hljs-list">(<span class="hljs-keyword">v</span>)</span>)</span><span class="hljs-comment">;</span><br></code></pre><p>转换后</p><br><pre><code> <span class="hljs-comment">// ES6</span><br><span class="hljs-pi">“use strict”</span>;<br><br><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">v</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(v);<br>};<br></code></pre><p>该用法可以放心使用。</p><br><h4 id="1-2-">1.2 类的声明和继承</h4><br><pre><code>//类的定义<br>class <span class="hljs-keyword">Animal</span> {<br>    //ES6中新型构造器<br>    constructor(name) {<br>        this.name = name;<br>    }<br>    //实例方法<br>    sayName() {<br>        console.log(‘My name <span class="hljs-keyword">is</span> ‘+this.name);<br>    }<br>}<br>//类的继承<br>class Programmer extends <span class="hljs-keyword">Animal</span> {<br>    constructor(name) {<br>        //直接调用父类构造器进行初始化<br>        super(name);<br>    }<br>    program() {<br>        console.log(<span class="hljs-string">“I’m coding…”</span>);<br>    }<br>}<br>//测试我们的类<br>var <span class="hljs-keyword">animal</span>=new <span class="hljs-keyword">Animal</span>(‘dummy’),<br>wayou=new Programmer(‘wayou’);<br><span class="hljs-keyword">animal</span>.sayName();//输出 ‘My name <span class="hljs-keyword">is</span> dummy’<br>wayou.sayName();//输出 ‘My name <span class="hljs-keyword">is</span> wayou’<br>wayou.program();//输出 ‘I’m coding…’<br></code></pre><p>转换后</p><br><pre><code><span class="hljs-comment">//类的定义</span><br><span class="hljs-pi">‘use strict’</span>;<br><br><span class="hljs-keyword">var</span> _get = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">_x, _x2, _x3</span>) </span>{ <span class="hljs-keyword">var</span> _again = <span class="hljs-literal">true</span>; _function: <span class="hljs-keyword">while</span> (_again) { <span class="hljs-keyword">var</span> object = _x, property = _x2, receiver = _x3; desc = parent = getter = <span class="hljs-literal">undefined</span>; _again = <span class="hljs-literal">false</span>; <span class="hljs-keyword">if</span> (object === <span class="hljs-literal">null</span>) object = <span class="hljs-built_in">Function</span>.prototype; <span class="hljs-keyword">var</span> desc = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(object, property); <span class="hljs-keyword">if</span> (desc === <span class="hljs-literal">undefined</span>) { <span class="hljs-keyword">var</span> parent = <span class="hljs-built_in">Object</span>.getPrototypeOf(object); <span class="hljs-keyword">if</span> (parent === <span class="hljs-literal">null</span>) { <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>; } <span class="hljs-keyword">else</span> { _x = parent; _x2 = property; _x3 = receiver; _again = <span class="hljs-literal">true</span>; <span class="hljs-keyword">continue</span> _function; } } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">‘value’</span> <span class="hljs-keyword">in</span> desc) { <span class="hljs-keyword">return</span> desc.value; } <span class="hljs-keyword">else</span> { <span class="hljs-keyword">var</span> getter = desc.get; <span class="hljs-keyword">if</span> (getter === <span class="hljs-literal">undefined</span>) { <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>; } <span class="hljs-keyword">return</span> getter.call(receiver); } } };<br><br><span class="hljs-keyword">var</span> _createClass = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineProperties</span>(<span class="hljs-params">target, props</span>) </span>{ <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; props.length; i++) { <span class="hljs-keyword">var</span> descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || <span class="hljs-literal">false</span>; descriptor.configurable = <span class="hljs-literal">true</span>; <span class="hljs-keyword">if</span> (<span class="hljs-string">‘value’</span> <span class="hljs-keyword">in</span> descriptor) descriptor.writable = <span class="hljs-literal">true</span>; <span class="hljs-built_in">Object</span>.defineProperty(target, descriptor.key, descriptor); } } <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Constructor, protoProps, staticProps</span>) </span>{ <span class="hljs-keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps); <span class="hljs-keyword">if</span> (staticProps) defineProperties(Constructor, staticProps); <span class="hljs-keyword">return</span> Constructor; }; })();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_inherits</span>(<span class="hljs-params">subClass, superClass</span>) </span>{ <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> superClass !== <span class="hljs-string">‘function’</span> &amp;&amp; superClass !== <span class="hljs-literal">null</span>) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">‘Super expression must either be null or a function, not ‘</span> + <span class="hljs-keyword">typeof</span> superClass); } subClass.prototype = <span class="hljs-built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: <span class="hljs-literal">false</span>, writable: <span class="hljs-literal">true</span>, configurable: <span class="hljs-literal">true</span> } }); <span class="hljs-keyword">if</span> (superClass) <span class="hljs-built_in">Object</span>.setPrototypeOf ? <span class="hljs-built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.<strong>proto</strong> = superClass; }<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_classCallCheck</span>(<span class="hljs-params">instance, Constructor</span>) </span>{ <span class="hljs-keyword">if</span> (!(instance <span class="hljs-keyword">instanceof</span> Constructor)) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">‘Cannot call a class as a function’</span>); } }<br><br><span class="hljs-keyword">var</span> Animal = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">//ES6中新型构造器</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span>(<span class="hljs-params">name</span>) </span>{<br>        _classCallCheck(<span class="hljs-keyword">this</span>, Animal);<br><br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-comment">//类的继承</span><br><br>    <span class="hljs-comment">//实例方法</span><br><br>    _createClass(Animal, [{<br>        key: <span class="hljs-string">‘sayName’</span>,<br>        value: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params"></span>) </span>{<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘My name is ‘</span> + <span class="hljs-keyword">this</span>.name);<br>        }<br>    }]);<br><br>    <span class="hljs-keyword">return</span> Animal;<br>})();<br><br><span class="hljs-keyword">var</span> Programmer = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Animal</span>) </span>{<br>    _inherits(Programmer, _Animal);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Programmer</span>(<span class="hljs-params">name</span>) </span>{<br>        _classCallCheck(<span class="hljs-keyword">this</span>, Programmer);<br><br>        <span class="hljs-comment">//直接调用父类构造器进行初始化</span><br>        _get(<span class="hljs-built_in">Object</span>.getPrototypeOf(Programmer.prototype), <span class="hljs-string">‘constructor’</span>, <span class="hljs-keyword">this</span>).call(<span class="hljs-keyword">this</span>, name);<br>    }<br><br>    <span class="hljs-comment">//测试我们的类</span><br><br>    _createClass(Programmer, [{<br>        key: <span class="hljs-string">‘program’</span>,<br>        value: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">program</span>(<span class="hljs-params"></span>) </span>{<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">“I’m coding…”</span>);<br>        }<br>    }]);<br><br>    <span class="hljs-keyword">return</span> Programmer;<br>})(Animal);<br><br><span class="hljs-keyword">var</span> animal = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">‘dummy’</span>),<br>    wayou = <span class="hljs-keyword">new</span> Programmer(<span class="hljs-string">‘wayou’</span>);<br>animal.sayName(); <span class="hljs-comment">//输出 ‘My name is dummy’</span><br>wayou.sayName(); <span class="hljs-comment">//输出 ‘My name is wayou’</span><br>wayou.program(); <span class="hljs-comment">//输出 ‘I’m coding…’</span><br></code></pre><p>转换过程使用了Object.defineProperty，在ie8下不兼容，除此外可以任意使用</p><br><h4 id="1-3-">1.3 增强的对象字面量</h4><br><pre><code><span class="hljs-comment">//通过对象字面量创建对象</span><br>var human = {<br>    breathe<span class="hljs-params">()</span> {<br>        console.<span class="hljs-built_in">log</span><span class="hljs-params">(‘breathing…’)</span>;<br>    }<br>};<br>var worker = {<br>    <strong>proto</strong>: human, <span class="hljs-comment">//设置此对象的原型为human,相当于继承human</span><br>    company: ‘freelancer’,<br>    work<span class="hljs-params">()</span> {<br>        console.<span class="hljs-built_in">log</span><span class="hljs-params">(‘working…’)</span>;<br>    }<br>};<br>human.breathe<span class="hljs-params">()</span>;<span class="hljs-comment">//输出 ‘breathing…’</span><br><span class="hljs-comment">//调用继承来的breathe方法</span><br>worker.breathe<span class="hljs-params">()</span>;<span class="hljs-comment">//输出 ‘breathing…’</span><br></code></pre><p>转换后</p><br><pre><code><span class="hljs-comment">//通过对象字面量创建对象</span><br><span class="hljs-pi">‘use strict’</span>;<br><br><span class="hljs-keyword">var</span> human = {<br>    breathe: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">breathe</span>(<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘breathing…’</span>);<br>    }<br>};<br><span class="hljs-keyword">var</span> worker = {<br>    <strong>proto</strong>: human, <span class="hljs-comment">//设置此对象的原型为human,相当于继承human</span><br>    company: <span class="hljs-string">‘freelancer’</span>,<br>    work: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">work</span>(<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘working…’</span>);<br>    }<br>};<br>human.breathe(); <span class="hljs-comment">//输出 ‘breathing…’</span><br><span class="hljs-comment">//调用继承来的breathe方法</span><br>worker.breathe(); <span class="hljs-comment">//输出 ‘breathing…’</span><br></code></pre><p>这个可以任意使用</p><br><h4 id="1-4-">1.4 字符串模板</h4><br><pre><code><span class="hljs-comment">//产生一个随机数</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span>=Math.random();<br>console.log(<code>your &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ${&lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt;}</code>);<br></code></pre><p>转换后</p><br><pre><code><span class="hljs-comment">//产生一个随机数</span><br><span class="hljs-pi">“use strict”</span>;<br><br><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Math</span>.random();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">“your num is “</span> + num);<br></code></pre><h4 id="1-5-">1.5 解构</h4><br><pre><code><span class="hljs-keyword">var</span> [name,gender,age]=[<span class="hljs-string">‘wayou’</span>,<span class="hljs-string">‘male’</span>,<span class="hljs-string">‘secrect’</span>];<span class="hljs-comment">//数组解构</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘name:’</span>+name+<span class="hljs-string">‘, age:’</span>+age);<span class="hljs-comment">//输出： name:wayou, age:secrect</span><br></code></pre><p>转化后</p><br><pre><code><span class="hljs-pi">‘use strict’</span>;<br><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">‘wayou’</span>;<br><span class="hljs-keyword">var</span> gender = <span class="hljs-string">‘male’</span>;<br><span class="hljs-keyword">var</span> age = <span class="hljs-string">‘secrect’</span>;<br><span class="hljs-comment">//数组解构</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘name:’</span> + name + <span class="hljs-string">‘, age:’</span> + age); <span class="hljs-comment">//输出： name:wayou, age:secrect</span><br></code></pre><p>此方法可以使用。但是尽量不要使用 var [a, b] = getVal(); 的方式，尽管getVal返回一个数组。因为此时会用到isArray，IE8上不能支持。</p><br><h4 id="1-6-">1.6 参数默认值，不定参数，拓展参数</h4><br><ul><br><li>参数默认值</li><br></ul><br><pre><code><span class="hljs-tag">function</span> <span class="hljs-tag">sayHello</span>(age, name=<span class="hljs-string">‘dude’</span>){<br>    <span class="hljs-tag">console</span><span class="hljs-class">.log</span>(<span class="hljs-built_in"><code>Hello ${name}</code></span>);<br>}<br><span class="hljs-tag">sayHello</span>(<span class="hljs-number">12</span>);<br></code></pre><p>转换后</p><br><pre><code><span class="hljs-pi">‘use strict’</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">age</span>) </span>{<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-built_in">arguments</span>.length &lt;= <span class="hljs-number">1</span> || <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">‘dude’</span> : <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘Hello ‘</span> + name);<br>}<br>sayHello(<span class="hljs-number">12</span>);<br></code></pre><ul><br><li>不定参数</li><br></ul><br><pre><code><span class="hljs-comment">//将所有参数相加的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-rest_arg">…x</span>)</span></span>{<br>    <span class="hljs-keyword">return</span> x.reduce((m,n)=&gt;m+n);<br>}<br><span class="hljs-comment">//传递任意个数的参数</span><br>console.log(add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<span class="hljs-comment">//输出：6</span><br>console.log(add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>));<span class="hljs-comment">//输出：15</span><br></code></pre><p>转换后</p><br><pre><code><span class="hljs-comment">//将所有参数相加的函数</span><br><span class="hljs-pi">“use strict”</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> _len = <span class="hljs-built_in">arguments</span>.length, x = <span class="hljs-built_in">Array</span>(_len), _key = <span class="hljs-number">0</span>; _key &lt; _len; _key++) {<br>        x[_key] = <span class="hljs-built_in">arguments</span>[_key];<br>    }<br><br>    <span class="hljs-keyword">return</span> x.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">m, n</span>) </span>{<br>        <span class="hljs-keyword">return</span> m + n;<br>    });<br>}<br><span class="hljs-comment">//传递任意个数的参数</span><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">//输出：6</span><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">//输出：15</span><br></code></pre><ul><br><li>扩展参数</li><br></ul><br><pre><code><span class="hljs-keyword">var</span> people=[<span class="hljs-string">‘Wayou’</span>,<span class="hljs-string">‘John’</span>,<span class="hljs-string">‘Sherlock’</span>];<br><span class="hljs-comment">//sayHello函数本来接收三个单独的参数人妖，人二和人三</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">people1,people2,people3</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code>Hello &lt;span class=&quot;hljs-subst&quot;&gt;${people1}&lt;/span&gt;,&lt;span class=&quot;hljs-subst&quot;&gt;${people2}&lt;/span&gt;,&lt;span class=&quot;hljs-subst&quot;&gt;${people3}&lt;/span&gt;</code></span>);<br>}<br><span class="hljs-comment">//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数</span><br>sayHello(…people);<span class="hljs-comment">//输出：Hello Wayou,John,Sherlock</span><br><br><span class="hljs-comment">//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法</span><br>sayHello.apply(<span class="hljs-literal">null</span>,people);<span class="hljs-comment">//输出：Hello Wayou,John,Sherlock</span><br></code></pre><p>转换后</p><br><pre><code><span class="hljs-pi">‘use strict’</span>;<br><br><span class="hljs-keyword">var</span> people = [<span class="hljs-string">‘Wayou’</span>, <span class="hljs-string">‘John’</span>, <span class="hljs-string">‘Sherlock’</span>];<br><span class="hljs-comment">//sayHello函数本来接收三个单独的参数人妖，人二和人三</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">people1, people2, people3</span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘Hello ‘</span> + people1 + <span class="hljs-string">‘,’</span> + people2 + <span class="hljs-string">‘,’</span> + people3);<br>}<br><span class="hljs-comment">//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数</span><br>sayHello.apply(<span class="hljs-literal">undefined</span>, people); <span class="hljs-comment">//输出：Hello Wayou,John,Sherlock</span><br><br><span class="hljs-comment">//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法</span><br>sayHello.apply(<span class="hljs-literal">null</span>, people); <span class="hljs-comment">//输出：Hello Wayou,John,Sherlock</span><br></code></pre><p>参数默认值，不定参数，拓展参数都可以完全使用</p><br><h4 id="1-7-let-const">1.7 let与const</h4><br><p>let和const完全支持，将都会被转为var，但是要理解let、var、const的区别。</p><br><h4 id="1-8-for-of">1.8 for of</h4><br><pre><code><span class="hljs-keyword">var</span> someArray = [ <span class="hljs-string">“a”</span>, <span class="hljs-string">“b”</span>, <span class="hljs-string">“c”</span> ];<br><br><span class="hljs-keyword">for</span> (v <span class="hljs-keyword">of</span> someArray) {<br>    <span class="hljs-built_in">console</span>.log(v);<span class="hljs-comment">//输出 a,b,c</span><br>}<br></code></pre><p>转换后</p><br><pre><code><span class="hljs-pi">“use strict”</span>;<br><br><span class="hljs-keyword">var</span> someArray = [<span class="hljs-string">“a”</span>, <span class="hljs-string">“b”</span>, <span class="hljs-string">“c”</span>];<br><br><span class="hljs-keyword">var</span> _iteratorNormalCompletion = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> _didIteratorError = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">var</span> _iteratorError = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-keyword">try</span> {<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> _iterator = someArray<a href="/"><span class="hljs-built_in">Symbol</span>.iterator</a>, _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class="hljs-literal">true</span>) {<br>    v = _step.value;<br><br>    <span class="hljs-built_in">console</span>.log(v); <span class="hljs-comment">//输出 a,b,c</span><br>  }<br>} <span class="hljs-keyword">catch</span> (err) {<br>  _didIteratorError = <span class="hljs-literal">true</span>;<br>  _iteratorError = err;<br>} <span class="hljs-keyword">finally</span> {<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator[<span class="hljs-string">“return”</span>]) {<br>      _iterator<a href="/"><span class="hljs-string">“return”</span></a>;<br>    }<br>  } <span class="hljs-keyword">finally</span> {<br>    <span class="hljs-keyword">if</span> (_didIteratorError) {<br>      <span class="hljs-keyword">throw</span> _iteratorError;<br>    }<br>  }<br>}<br></code></pre><p>这里IE下面没有throw，所以无法支持</p><br><h4 id="1-9-iterator-generator">1.9 iterator, generator</h4><br><pre><code><span class="hljs-keyword">var</span> ids = {<br>  <em>[<span class="hljs-built_in">Symbol</span>.iterator]: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> {<br>      next: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-keyword">return</span> { value: <span class="hljs-string">‘id-‘</span> + index++, done: <span class="hljs-literal">false</span> };<br>      }<br>    };<br>  }<br>};<br></em></code></pre><p>转换后</p><br><pre><code><span class="hljs-pi">‘use strict’</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_defineProperty</span>(<span class="hljs-params">obj, key, value</span>) </span>{ <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> obj) { <span class="hljs-built_in">Object</span>.defineProperty(obj, key, { value: value, enumerable: <span class="hljs-literal">true</span>, configurable: <span class="hljs-literal">true</span>, writable: <span class="hljs-literal">true</span> }); } <span class="hljs-keyword">else</span> { obj[key] = value; } <span class="hljs-keyword">return</span> obj; }<br><br><span class="hljs-keyword">var</span> ids = _defineProperty({}, <span class="hljs-built_in">Symbol</span>.iterator, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">return</span> {<br>    next: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>) </span>{<br>      <span class="hljs-keyword">return</span> { value: <span class="hljs-string">‘id-‘</span> + index++, done: <span class="hljs-literal">false</span> };<br>    }<br>  };<br>});<br></code></pre><p>不建议使用，转换后仍需要浏览器支持</p><br><h4 id="1-10-module-proxies-symbol">1.10 模块 module、Proxies、Symbol</h4><br><pre><code><span class="hljs-comment">// point.js</span><br><span class="hljs-module"><span class="hljs-keyword">module</span> “point” </span>{<br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Point {<br>        <span class="hljs-constructor"><span class="hljs-keyword">constructor</span> (x, y) </span>{<br>            <span class="hljs-keyword">public</span> x = x;<br>            <span class="hljs-keyword">public</span> y = y;<br>        }<br>    }<br>}<br></code></pre><p>完全不支持，import也不支持，解析报错，所以建议不使用，使用原来的require</p><br><h4 id="1-11-map-set-weakmap-weakset">1.11 Map，Set 和 WeakMap，WeakSet</h4><br><p>Map，Set 和 WeakMap，WeakSet在es5中都没有对应的类型与之对应，所以均不支持转换，由浏览器决定兼容性</p><br><h4 id="1-12-promises-math-number-string-object-api">1.12 Promises、Math，Number，String，Object 的新API</h4><br><p>不做语法转换，由浏览器决定兼容性</p><br><h4 id="1-13-export-import">1.13 export &amp; import</h4><br><pre><code><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myModule</span>(<span class="hljs-params">someArg</span>) </span>{<br>  <span class="hljs-keyword">return</span> someArg;<br>}<br></code></pre><p>转换后</p><br><pre><code><span class="hljs-pi">“use strict”</span>;<br><br><span class="hljs-built_in">Object</span>.defineProperty(exports, <span class="hljs-string">“__esModule”</span>, {<br>  value: <span class="hljs-literal">true</span><br>});<br>exports.myModule = myModule;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myModule</span>(<span class="hljs-params">someArg</span>) </span>{<br>  <span class="hljs-keyword">return</span> someArg;<br>}<br></code></pre><pre><code><span class="hljs-keyword">import</span>  <span class="hljs-keyword">as</span> baz <span class="hljs-keyword">from</span> <span class="hljs-string">‘myModule’</span>;<br></code></pre><p>转换后</p><br><pre><code><span class="hljs-pi">‘use strict’</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_interopRequireWildcard</span>(<span class="hljs-params">obj</span>) </span>{ <span class="hljs-keyword">if</span> (obj &amp;&amp; obj.__esModule) { <span class="hljs-keyword">return</span> obj; } <span class="hljs-keyword">else</span> { <span class="hljs-keyword">var</span> newObj = {}; <span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">null</span>) { <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) { <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[<span class="hljs-string">‘default’</span>] = obj; <span class="hljs-keyword">return</span> newObj; } }<br><br><span class="hljs-keyword">var</span> _myModule = <span class="hljs-built_in">require</span>(<span class="hljs-string">‘myModule’</span>);<br><br><span class="hljs-keyword">var</span> baz = _interopRequireWildcard(_myModule);<br></code></pre><p>所以可以使用export和import等方法来进行模块的加载处理依赖，同时export使用到了defineProperty，IE8兼容性存在问题。</p><br><p>1.14 生成器函数</p><br><pre><code><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">foo</span><span class="hljs-params">()</span> {</span> };<br>var bar = foo<span class="hljs-params">()</span>;<br>bar.next<span class="hljs-params">()</span>; <span class="hljs-comment">// Object {value: undefined, done: true}</span><br></code></pre><p>转换后</p><br><pre><code><span class="hljs-string">“use strict”</span>;<br><br>var marked<span class="hljs-number">0</span><span class="hljs-variable">$0</span> = [foo].<span class="hljs-keyword">map</span>(regeneratorRuntime.mark);<br><span class="hljs-keyword">function</span> foo() {<br>  return regeneratorRuntime.wrap(function foo$(context<span class="hljs-variable">$1</span><span class="hljs-variable">$0</span>) {<br>    while (<span class="hljs-number">1</span>) switch (context<span class="hljs-variable">$1</span><span class="hljs-variable">$0</span>.prev = context<span class="hljs-variable">$1</span><span class="hljs-variable">$0</span>.next) {<br>      case <span class="hljs-number">0</span>:<br>      case <span class="hljs-string">“end”</span>:<br>        return context<span class="hljs-variable">$1</span><span class="hljs-variable">$0</span>.stop();<br>    }<br>  }, marked<span class="hljs-number">0</span><span class="hljs-variable">$0</span>[<span class="hljs-number">0</span>], this);<br>};<br>var bar = foo();<br>bar.<span class="hljs-keyword">next</span>(); // Object {value: undefined, done: true}<br></code></pre><p>regeneratorRuntime在IE下面不能支持，所以不建议使用。</p><br><p>  ES6新特性用到的就这些，其它的基本由浏览器本身决定。这部分代码Babel会像处理es5代码一样，不进行加工处理。对于部分ES6的语法，Babel会解析抛错，即使不抛错也不进行处理，建议不使用。<br>1.15 数组拷贝</p><br><pre><code><span class="hljs-keyword">const</span> items = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> itemsCopy = […items];<br></code></pre><p>转换后</p><br><pre><code><span class="hljs-pi">“use strict”</span>;<br><br><span class="hljs-keyword">var</span> items = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> itemsCopy = [].concat(items);<br></code></pre><p>可以使用</p><br><h2 id="-es6-">二、ES6打包体系</h2><br><p>  使用babel处理了一部分ES6的兼容性转换问题，但是ES6的打包依然必须依赖目前通用的打包管理方案。目前流行的打包方案有以下几种<br>1，webpack+babel+browsify+gulp<br>gulp负责构建、使用webpack打包、browsify管理组件，babel转换<br>这目前被说的最多的解决方案，因为github上一大堆例子，而且可以很简单的支持到react，但是这样不能形成一个完整的开发体系；另外过于统一，和所在团队使用的技术差异较大。</p><br><p>2，fis3 + babel + Qjs + lego<br>选择这样的方案一方面是因为团队目前的主要技术选型，另一方面则是每个工具的特有优势。目前这块仍在不断完善当中。</p><br><h2 id="-">三、小结</h2><br><p>  所以使用ES6这一方案来进行实际开发是否有一定的必要性仍需要进行考虑，因为es6的高等特性在es5中没有对应的特性去代替，即使能够代替也是使用一些复杂的自定义函数去做，而部分可转换实现的特性仍然较少，而且写起来确实很简洁，这也是es6的一大优势。</p><br><p>  另外为了让Babel能在实际的开发中使用，我们也自己总结了一份关于ES6部分的规范：</p><br><p>  <a href="https://github.com/ouvens/ecmaScript-2015-babel-rules" target="_blank">https://github.com/ouvens/ecmaScript-2015-babel-rules</a></p><br><br>          </div><br>  </div>
</div></div>]]></content>
    <summary type="html">
    <![CDATA[<div class="panel panel-border"><br>    <div class="inner topic"><br>      <div id="topic_content" class="topic_content"><br><br>          <]]>
    </summary>
    
      <category term="babel" scheme="http://iamcc.github.io/tags/babel/"/>
    
      <category term="es2015" scheme="http://iamcc.github.io/tags/es2015/"/>
    
      <category term="es6" scheme="http://iamcc.github.io/tags/es6/"/>
    
      <category term="javascript" scheme="http://iamcc.github.io/tags/javascript/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/tags/tech/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于iOS逆向工程的微信机器人 - 猫友会大讲坛第1期]]></title>
    <link href="http://iamcc.github.io/2016/01/21/%E5%9F%BA%E4%BA%8EiOS%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA-%E7%8C%AB%E5%8F%8B%E4%BC%9A%E5%A4%A7%E8%AE%B2%E5%9D%9B%E7%AC%AC1%E6%9C%9F/"/>
    <id>http://iamcc.github.io/2016/01/21/基于iOS逆向工程的微信机器人-猫友会大讲坛第1期/</id>
    <published>2016-01-21T10:05:55.000Z</published>
    <updated>2016-01-21T10:21:05.000Z</updated>
    <content type="html"><![CDATA[<p></p><h2 style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold;font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238);">猫友会大讲坛</h2><p></p>
<p style="margin: 0px 0px 1.2em !important;"><br>    猫友会大讲坛是“猫友会”开设的一个知识分享栏目，”知识分享，是能力的锻炼，双方都会有收获。只要真诚，只要是自己觉得好的东西，都可以来分享”，<br></p><br><a id="more"></a><br><p style="margin: 0px 0px 1.2em !important;">所以欢迎大家踊跃报名，不限主题。</p><br><ul style="margin: 1.2em 0px;padding-left: 2em;" class=" list-paddingleft-2"><br>    <li><br>        <p>本期内容：结合一个iOS微信机器人的实现，介绍iOS逆向工程相关的概念，工具等。</p><br>    </li><br>    <li><br>        <p>策划：侠天</p><br>    </li><br>    <li><br>        <p>编辑：刘子洋</p><br>    </li><br></ul><br><p style="margin: 0px 0px 1.2em !important;">“猫友会” 是什么？参看文章末的公众号.</p><br><h2 style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold;font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238);">讲师介绍-沙梓社</h2><br><p style="margin: 0px 0px 1.2em !important;"><br>    湖北武汉人，《iOS应用逆向工程》系列图书的作者，在Cydia（最大的越狱iOS商店）上有11款独立作品，接受过CSDN的专访，书的英文版在GitHub上开源后收获了2600+ stars，是首位在WWJC上发表演讲的中国人，以「提升中国iOS开发者在国际上的地位」为己任。<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    在很多朋友的眼里，iOS逆向工程是一个小众、神秘的方向，为什么我会选择这个小众的方向呢？这要从我最喜欢的一首诗说起。第一次，我是在李开复的自传《世界因你不同》里看到这首诗，当时就感觉身心得到了非常强烈的震撼：<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaDL8Za2J0noyAYU7YxZsaj3BcDvicibfFW0BPaoJf2pRwvibLcato9fyhw/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaDL8Za2J0noyAYU7YxZsaj3BcDvicibfFW0BPaoJf2pRwvibLcato9fyhw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br><br>    <span style="line-height: 1.6;">因为我感觉到自己就是这类人：如果有两条路给我选，我确实会选更少人走的那一条。我发现自己是一个刻意保持自己跟别人不同的人。</span><br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    在初次读到这首诗时，我还没有开始学习iOS。在从事iOS方面的研究后，又从乔帮主亲自配音的广告中寻找到了灵感，发现苹果跟我的价值观非常一致，就是要追求不同。因此，我更加认定iOS就是我的主攻方向。<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaOBqXGgUQh95c3AEcnEI3d2k85lSqZO92Riavox7So99SJtTK1FXP17A/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaOBqXGgUQh95c3AEcnEI3d2k85lSqZO92Riavox7So99SJtTK1FXP17A/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    我的成长之路，就是一条与众不同的未选之路：别人都在学「大众情人」Windows时，我开始学「小众路人」iOS；别人都在学iOS正向开发时，我开始学iOS逆向工程。正是因为追求不同，我写的《iOS应用逆向工程》成为了全球唯一一本iOS逆向相关书籍，而且有美国和韩国的出版社想要引进本书，打破了中国iOS知识产权零输出的尴尬纪录。我用自己的努力代表中国iOS开发者在国际上发声，而且为iOS主流社区所认可，作为中国人我感到非常自豪。<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    简单来说，我所研究的，主要是iOS应用层的逆向工程，对内核层的逆向工程只是稍有涉猎，没有入门。应用层的逆向工程，我感觉自己玩得差不多了，应用层的所有逆向工程相关问题，都可以用我那本书上介绍过的知识和技术得到解决，我觉得没有太大挑战性了，主要是劳动量问题。到了这个地步，我的规划主要分为2个方向：<br></p><br><ol style="margin: 1.2em 0px;padding-left: 2em;" class=" list-paddingleft-2"><br>    <li><br>        <p><br>            继续从事内核研究，这个方向的终点是「越狱」（越狱即通过漏洞利用拿到iOS的root权限，代表了iOS技术研究的最高境界）；<br>        </p><br>    </li><br>    <li><br>        <p>换个脑子，用一些非技术能力武装自己，让自己成为一专多能的人才。这个方向的终点就是创业。</p><br>    </li><br></ol><br><p style="margin: 0px 0px 1.2em !important;"><br>    当然，很多朋友会问，IT人员创业的普遍做法，都是去BAT这样的互联网公司干2年，观察一下他们的玩法，然后拉一个团队出来干。你问啥不这么干呢？主要是碰到了一个很好的项目。大公司一直都在那里，想什么时候去都可以；而好项目却不常有，机会过去就过去了，不等人，所以我在准备并不算充分的情况下选择了创业这条路。<br></p><br><p style="margin: 0px 0px 1.2em !important;">交代完了我的背景，咱们可以进入正题了😁</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaKZyBh5RSpibvpPoeOlG0Yp77BSaTs2fuyzaPQqz9sWF5aMSzrsqh1tw/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaKZyBh5RSpibvpPoeOlG0Yp77BSaTs2fuyzaPQqz9sWF5aMSzrsqh1tw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    大意是「通过研究现有功能的实现原理，理解并融会贯通，在此基础上实现（甚至增强）这个功能。」也就是说，不是照猫画虎，而是师夷长技，「借刀杀人」。<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    在我的理解里，逆向工程是一种工程师式的高级思维方式。给你水、面粉、糖、芝麻，让你做烧饼，这是正向工程；给你一个烧饼，让你分析出它是由多少水、多少面粉、多少糖、多少芝麻组成的，这是逆向工程。也就是说，根据图纸制作实物的这个过程是正向工程，而根据实物倒推图纸的这个过程则是逆向工程。乔布斯曾说「Good artists copy; Great artists steal.」逆向工程有异曲同工之妙。<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    举几个通过逆向工程师夷长技的例子：<br>    <br><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaUwwO58CuicdE6FAKhjSwp8cdI1NzOjBfr2ibUvt9SGQJGgCPvic8Es8Hg/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaUwwO58CuicdE6FAKhjSwp8cdI1NzOjBfr2ibUvt9SGQJGgCPvic8Es8Hg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><ul style="margin: 1.2em 0px;padding-left: 2em;" class=" list-paddingleft-2"><br>    <li><br>        <p>通过逆向工程分析instagram滤镜算法。一个人可以“steal”一个滤镜算法团队的工作成果；</p><br>    </li><br></ul><br><ul style="margin: 1.2em 0px;padding-left: 2em;" class=" list-paddingleft-2"><br>    <li><br>        <p><br>            研究微信的网络传输协议，就像@58沈剑 在博客里说到的那样。就我目前对微信九牛一毛的研究来说，就已经发现了一处可以进一步节省流量的地方，但是估计是因为历史遗留问题，这块代码不好动；<br>        </p><br>    </li><br>    <li><br>        <p><br>            看看1Password做了哪些防护。1Password是专门用于保存密码的，类似于保险柜，安全系数必须很高，它把我们的密码存在了哪里，通过什么方式加密？这些都是值得我们学习借鉴的地方。<br>        </p><br>    </li><br></ul><br><p style="margin: 0px 0px 1.2em !important;"><br>    除了去学习别人的长处，逆向工程还可以发现自己和别人的短处：<br>    <br><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaU72eOibXQfdwUnpIDyf9CCqHeBa4aQbw308Dd5gCMV1v8HsT16sntYw/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaU72eOibXQfdwUnpIDyf9CCqHeBa4aQbw308Dd5gCMV1v8HsT16sntYw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;">这种低级错误，星巴克可以犯，但1Password不能犯；这取决于你的产品定位。这个错误当然是通过逆向工程发现的。</p><br><p style="margin: 0px 0px 1.2em !important;">这是某世界500强企业犯的，通过HTTP协议明文传输用户手机和密码的低级错误：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaOPCicjWuWyO7Xiahkkfx1ibMRraibtBaj7dqm81FGvm4QSmvUJMIUkQAIA/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaOPCicjWuWyO7Xiahkkfx1ibMRraibtBaj7dqm81FGvm4QSmvUJMIUkQAIA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;">这是某突破3亿用户的移动App：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaibY2sibqIM7O0pkj145JwWywopmiaCNWib4VXKm97nURBsWFyjM6memebA/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaibY2sibqIM7O0pkj145JwWywopmiaCNWib4VXKm97nURBsWFyjM6memebA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    把传输协议的密钥硬编码在代码里，有逆向工程基础的朋友可以轻松还原整套网络传输协议。淘宝上一堆堆的这个刷榜那个刷赞，就是这个原理。<br></p><br><p style="margin: 0px 0px 1.2em !important;">阿凹(猫友会吉祥物，一个微信机器人)，是「借刀杀人」最典型的运用之一：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctav7ia6J4vaUSIx23f0rs6X45kzMZZ1gPkck6RTouRa9JPKcv38feBrjQ/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctav7ia6J4vaUSIx23f0rs6X45kzMZZ1gPkck6RTouRa9JPKcv38feBrjQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    阿凹的实现原理，简单说，就是通过逆向工程的方式找出微信iOS客户端的收发信息等私有接口，然后基于自己的逻辑调用这些接口，实现针对特殊事件的自动化应答功能。<br></p><br><p style="margin: 0px 0px 1.2em !important;">我个人最常用的iOS逆向工程工具主要有这些：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaWrdQZQa5EGb54VKb1iaSRCicsia53dricDj8CnZUFvlQAicyshyffIsc2QQ/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaWrdQZQa5EGb54VKb1iaSRCicsia53dricDj8CnZUFvlQAicyshyffIsc2QQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><ul style="margin: 1.2em 0px;padding-left: 2em;" class=" list-paddingleft-2"><br>    <li><br>        <p><br>            dumpdecrypted：将苹果加过密的App砸壳。通过AppStore处理的App，都是加过密的，不能直接进行二进制分析，需要先解秘，业界称为「砸壳」。它的原理是等App完全加载进内存，得到解密后，再把解密过的内存给dump出来，形成解密后的二进制文件，可以直接分析。<br>        </p><br>    </li><br>    <li><br>        <p><br>            class-dump：导出MachO文件里的ObjC类及方法定义。因为ObjC是一门强烈依赖于运行时的语言，它的文件类型是MachO（类比于Windows里的PE文件类型），MachO里存放了大量运行时需要用到的信息，从中可以收集整理，还原出一个App源代码里的ObjC头文件。<br>        </p><br>    </li><br>    <li><br>        <p><br>            CydiaSubstrate：将第三方动态库注入进程。它是越狱插件的存在前提。在iOS开机时，会把特定目录下的所有库，给加载到指定的进程里，俗称「hook」或「钩子」。<br>        </p><br>    </li><br>    <li><br>        <p>Cycript：用JS语法写ObjC方法。这是Cydia之父Saurik发明的一门语言，我个人主要用它来测试私有函数。</p><br>    </li><br>    <li><br>        <p>Theos：越狱插件开发工具。是我的书序作者DHowett开发的。iOS正向开发用Xcode，逆向开发用Theos。</p><br>    </li><br>    <li><br>        <p>IDA：全平台反汇编、反编译工具。搞技术的一般都听说过这个软件，就不多介绍了。</p><br>    </li><br>    <li><br>        <p>Hopper：OSX反汇编、反编译工具。比IDA便宜了1000倍，但功能跟IDA差不多；主攻苹果系操作系统。</p><br>    </li><br>    <li><br>        <p>debugserver + LLDB：动态调试器。是大名鼎鼎的「苹果版」GDB。</p><br>    </li><br></ul><br><p style="margin: 0px 0px 1.2em !important;">class-dump的效果，图中显示的是新浪微博App的所有头文件：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaggIpvRYWVstMicKou3pzj8PmRlh5TjTz2UaPL2J5w8Ln61OcO0EfVsQ/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaggIpvRYWVstMicKou3pzj8PmRlh5TjTz2UaPL2J5w8Ln61OcO0EfVsQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;">Cycript的效果，可以看到微信星号密码的明文：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctartGaDNbx3m2DcLhvyFY5ibXf0dmLpbicnBQNtNLkyrJPsR1POdnRj3jw/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctartGaDNbx3m2DcLhvyFY5ibXf0dmLpbicnBQNtNLkyrJPsR1POdnRj3jw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;">Theos开发插件的运行效果：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaibyoxDeV6OHSBYBRia73UQHv3tJKFlR2INEyFFB3PjVqxM8Op1Y6pJkA/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaibyoxDeV6OHSBYBRia73UQHv3tJKFlR2INEyFFB3PjVqxM8Op1Y6pJkA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    所有进程的[NSDictionary dictionaryWithContentsOfFile:]方法均被「hook」，可以随意篡改。<br></p><br><p style="margin: 0px 0px 1.2em !important;">IDA的效果：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctariaBUBP0QNBjVOaFZO3CM9zXqWq4DniaepYzmu0MwViab9iawE6tUOcOxA/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctariaBUBP0QNBjVOaFZO3CM9zXqWq4DniaepYzmu0MwViab9iawE6tUOcOxA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><p style="margin: 0px 0px 1.2em !important;">对于熟悉汇编语言（图里是ARM汇编）的朋友来说，所有未加密的二进制文件，均等同于开源。这是什么概念，做技术的都懂。</p><br><p style="margin: 0px 0px 1.2em !important;">接下来我简单介绍下阿凹的制作流程：</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    核心在于找到收发微信消息的函数，然后加以修改利用：<br>    <br><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctalqH7kXyibDmaQuIcuxqlmbD9TXfOeZmSmwib2micWyVWGM4dDR3WuXqtw/0?wx_fmt=jpeg" data-ratio="0.75" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctalqH7kXyibDmaQuIcuxqlmbD9TXfOeZmSmwib2micWyVWGM4dDR3WuXqtw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><ol style="margin: 1.2em 0px;padding-left: 2em;" class=" list-paddingleft-2"><br>    <li><br>        <p>用dumpdecrypted给微信砸壳，解密出的文件近50M：</p><br>        <p><br>            <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaj9KGFb2dSbSpEW6YS6k1Sm7L9mIqKkwc6dfXmRjoeWJUy4q3Hqe5eQ/0?wx_fmt=jpeg" data-ratio="0.09090909090909091" data-w="528" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaj9KGFb2dSbSpEW6YS6k1Sm7L9mIqKkwc6dfXmRjoeWJUy4q3Hqe5eQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>            <br><br>            <br></p><br>    </li><br>    <li><br>        <p>class-dump出微信的所有头文件，近7000个：</p><br>        <p><br>            <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaApGdyoCcY1kpfRU9icNdViafDF4ZC891NsAYuoibbM45KXEqk54Hsd5pg/0?wx_fmt=jpeg" data-ratio="0.0928030303030303" data-w="528" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctaApGdyoCcY1kpfRU9icNdViafDF4ZC891NsAYuoibbM45KXEqk54Hsd5pg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>            <br><br>            <br></p><br>    </li><br>    <li><br>        <p>定位到收消息的View，进而定位到V对应的C，找出逻辑层的收消息函数。</p><br>    </li><br>    <li><br>        <p><br>            定位到发消息的按钮（也是一个View），进而定位到对应的C，找出逻辑层的发消息函数（这个过程没法用截图表现出来，所以我只简单描述下）。<br>        </p><br>    </li><br>    <li><br>        <p>组合收发函数，完成阿凹的逻辑，最后写代码：</p><br>    </li><br></ol><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctabkj4UV4KlicovJicPXa4sKZcVLPFruibEpqXth82JI6IrTnlvxEj572EQ/0?wx_fmt=jpeg" data-ratio="0.6258992805755396" data-w="" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06K87AcHMF2bH5s5n4icUvctabkj4UV4KlicovJicPXa4sKZcVLPFruibEpqXth82JI6IrTnlvxEj572EQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p><br><h2 style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold;font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238);">问题及讨论环节</h2><br><p style="margin: 0px 0px 1.2em !important;"><br>    【问】沙大神，如果我成功找到了一个应用的加密函数，然后剩下的工作就是把它翻译成OC语言，这个过程有什么技巧么？我ARM汇编没怎么接触过，除了硬着头皮上，有木有什么捷径＝ ＝！<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【答】如果你是土豪，那么可以购买IDA pro，1年十几万上下。可以把二进制文件给反编译成C语言。如果你不是，可以500块人民币购买Hopper，Hopper支持32位ARM汇编的反编译，直接反编译成C语言<br></p><br><p style="margin: 0px 0px 1.2em !important;">【问】SOGA，也就是我需要从一台ARM v7的机器拿到二进制文件，之后采用这种方法对么</p><br><p style="margin: 0px 0px 1.2em !important;">【答】是的，买一台二手iPhone 5即可</p><br><p style="margin: 0px 0px 1.2em !important;">【问】你好沙神，比如说我用SQLCipher对用户的聊天记录SQLite进行加密，逆向工程能破解这个本地化的库文件么</p><br><p style="margin: 0px 0px 1.2em !important;">【答】可以破</p><br><p style="margin: 0px 0px 1.2em !important;">【问】那就是SQLCipher其实也不是绝对安全</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【答】只要这个库在本地，可以被你的App解密，那么我就也可以解密；如果这个库在你本地没法解密，那我可能也没法解密。微信本身提供了红包功能，阿凹就可以抢红包，只是这个功能我没开放出来，破坏游戏平衡了；微信本身没有提供冲厕所的功能，所以我也没办法实现。<br></p><br><p style="margin: 0px 0px 1.2em !important;">【问】额，意思 那就是只能看逆向者的三观了</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【答】是这样的，这是把双刃剑。GitHub上一个复旦大学生开源的Android抢红包代码，1000多个star，洋洋洒洒几千行代码，我可以50行以内搞定，我只是觉得开源出来没啥意义，就算了<br></p><br><p style="margin: 0px 0px 1.2em !important;">【问】那我又得问正向问题，就没有级别比较高的用户本地数据全保障方法了么</p><br><p style="margin: 0px 0px 1.2em !important;">【答】参考支付宝和1Password</p><br><p style="margin: 0px 0px 1.2em !important;">【问】能给讲下支付宝和1Password大概是怎么处理的么</p><br><p style="margin: 0px 0px 1.2em !important;">【答】我也没有研究过，因为暂时用不到……</p><br><p style="margin: 0px 0px 1.2em !important;">【问】阿凹回答问题的答案是调的什么资源？还是通过自己分词得来的？</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【答】是用的图灵机器人。微信本身只提供了消息收发接口，发的是什么消息，是由图灵机器人决定的。我本来打算加入语音识别功能的，用科大讯飞，但是现在太忙了，没时间，就先搁置了😥<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【问】既然说到微信抢红包，沙大神我再问个问题。我猜想微信抢红包和发送聊天消息有点类似，通过检测红包发送消息和找到红包点击函数来快速抢红包。那么之前我也见过有人因为抢红包被微信发现禁用抢红包功能7天，请问沙大神，如果你是微信开发人员，你会采取什么手段来防范逆向开发人员<br></p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【答】这取决于用逆向工程干什么，如果是写个阿凹这样的机器人，我觉得无伤大雅。如果是抢红包，那我能想到的一个直观防范方式，就是如果发红包和抢红包的时间间隔非常短，比如1秒内，那么说明是用外挂了。另外就是把这部分代码写得难懂一点，那么逆向工程的难度也就大一点。<br></p><br><p style="margin: 0px 0px 1.2em !important;">【问】我理解，理论上逆向工程都可以通过找到对应函数完成应用原本的功能，比如点击事件等</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【答】是这样的，矛和盾总是没有止境的，只是看逆向工程付出的代价多大了。提高逆向工程的难度，让逆向工程师觉得不值得，是最好的防范方式。苹果防越狱，就非常高明，我把你们越狱社区最好的点子全都学习到了正版iOS里，用户觉得苹果越来越好用了，越狱越来越没有意义了。越的人少了，高手觉得没意思了，自然就防住了。<br></p><br><p style="margin: 0px 0px 1.2em !important;">【问】嗯，那么能简单介绍几种常用提高逆向成本的正向开发手段么</p><br><p style="margin: 0px 0px 1.2em !important;"><br>    【答】用C/C++函数写核心功能；关键功能函数名起个完全不相干的东西；编译MachO时加上ptrace、__restrict标记等方法；Swift/ObjC混编。这几个方法，可以防住绝大多数脚本小子了。<br></p><br><p style="margin: 0px 0px 1.2em !important;">【问】我以前看过一本安全的书说用C++写然后代码用大量模版，逆向人就会疯了，是这样么？</p><br><p style="margin: 0px 0px 1.2em !important;">【答】C++确实不好逆向</p><br><h2 style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold;font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238);">广告</h2><br><p style="margin: 0px 0px 1.2em !important;"><br>    沙梓社在上海创业，现在找靠谱java后端，找的火急火燎。这里有简介：<br>    <a><a href="http://iosre.com/t/30-ios-hacker/1618" target="_blank" rel="external">http://iosre.com/t/30-ios-hacker/1618</a></a><br>    &nbsp;和他的2015年终总结：<br>    <a><a href="http://iosre.com/t/topic/2523" target="_blank" rel="external">http://iosre.com/t/topic/2523</a></a><br>    &nbsp;如果大家在上海有认识的靠谱java后端，麻烦帮我引荐一下，叩谢！<br></p><br><h2 style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold;font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238);">长按关注猫头鹰技术公众号(mtydev)</h2><br><p style="margin: 0px 0px 1.2em !important;"><br>    <img data-s="300,640" data-type="jpeg" data-src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06LYzKiaUs8wK3kg0MW8pWSLC4hFFCZjXqsj3qm9ZqNlQlCziaBHibIasr2eYYMa9j7lnqyOXbFxmNeYA/0?wx_fmt=jpeg" data-ratio="1" data-w="430" src="http://mmbiz.qpic.cn/mmbiz/MN5ia6tKb06LYzKiaUs8wK3kg0MW8pWSLC4hFFCZjXqsj3qm9ZqNlQlCziaBHibIasr2eYYMa9j7lnqyOXbFxmNeYA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" style="width: auto !important; visibility: visible !important; height: auto !important;"><br>    <br></p>


<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMTQwNTA3Nw==&amp;mid=401424368&amp;idx=1&amp;sn=df547336295fd6a06c9abd483e069266&amp;scene=0#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzIwMTQwNTA3Nw==&amp;mid=401424368&amp;idx=1&amp;sn=df547336295fd6a06c9abd483e069266&amp;scene=0#wechat_redirect</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><h2 style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold;font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238);">猫友会大讲坛</h2></p>
<p style="margin: 0px 0px 1.2em !important;"><br>    猫友会大讲坛是“猫友会”开设的一个知识分享栏目，”知识分享，是能力的锻炼，双方都会有收获。只要真诚，只要是自己觉得好的东西，都可以来分享”，<br></p><br>]]>
    
    </summary>
    
      <category term="hack" scheme="http://iamcc.github.io/tags/hack/"/>
    
      <category term="ios" scheme="http://iamcc.github.io/tags/ios/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/tags/tech/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google搜索技巧]]></title>
    <link href="http://iamcc.github.io/2016/01/21/Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <id>http://iamcc.github.io/2016/01/21/Google搜索技巧/</id>
    <published>2016-01-21T07:20:06.000Z</published>
    <updated>2016-01-21T07:23:23.000Z</updated>
    <content type="html"><![CDATA[<p><br>    在今天，用户可以通过搜索引擎轻松找出自己想要的信息，但还是难以避免结果不尽如人意的情况。实际上，用户仅需掌握几个常用技巧即可轻松化解这种尴尬。下面介绍 10 个在进行 Google 搜索时可以使用的便捷技巧，其他搜索引擎也支持这 10 种技巧。<br></p><br><a id="more"></a><br><p>1、准确搜索</p><br><p align="center"><br>    <img height="324" alt="" width="498" src="http://cimage.tianjimedia.com/uploadImages/20160120090324113.jpg"></p><br><p>最简单、有效的准确搜索方式是在关键词上加上双引号，在这种情况下，搜索引擎只会反馈和关键词完全吻合的搜索结果。</p><br><p><br>    比方说在搜索「Joe Bloggs」的时候，在没有给关键词加上双引号的情况，搜索引擎会显示所有分别和「Joe」以及「Bloggs」相关的信息，但这些显然并不是我们想要 的结果。但在加上双引号后，搜索引擎则仅会在页面上反馈和「Joe Bloggs」相吻合的信息。<br></p><br><p>准确搜索在排除常见但相近度偏低的信息时非常有用，可以为用户省去再度对结果进行筛选的麻烦。</p><br><p>2、排除关键词</p><br><p align="center"><br>    <img height="351" alt="" width="498" src="http://cimage.tianjimedia.com/uploadImages/20160120090324931.jpg"></p><br><p>如果在进行准确搜索时没有找到自己想要的结果，用户可以对包含特定词汇的信息进行排除，仅需使用减号即可。</p><br><p><br>    例如在搜索「『Joe Bloggs』-jeans」时，你所得到的结果反馈是不包含「jeans」字眼的「Joe Bloggs」条目。<br></p><br><p>3、用「Either OR」(或)逻辑进行搜索</p><br><p align="center"><br>    <img height="295" alt="" width="493" src="http://cimage.tianjimedia.com/uploadImages/20160120090324130.jpg"></p><br><p><br>    在默认搜索下，搜索引擎会反馈所有和查询词汇相关的结果，但通过使用「OR」逻辑，你可以得到和两个关键词分别相关的结果，而不仅仅是和两个关键词 都同时相关的结果。巧妙使用「OR」搜索可以让你在未能确定哪个关键词对于搜索结果起决定作用时依然可以确保搜索结果的准确性。<br></p><br><p>4、同义词搜索</p><br><p align="center"><br>    <img height="272" alt="" width="454" src="http://cimage.tianjimedia.com/uploadImages/20160120090325927.jpg"></p><br><p>有时候对不太确切的关键词进行搜索反而会显得更加合适。在未能准确判断关键词的情况下，你可以通过同义词进行搜索。</p><br><p><br>    如果你在搜索引擎输入「plumbing ~university」，你所得到的反馈结果会包含「plumbing universities」和「plumbing colleges」等相似条目。<br></p><br><p>5、在站内进行搜索</p><br><p align="center"><br>    <img height="303" alt="" width="498" src="http://cimage.tianjimedia.com/uploadImages/20160120090325251.jpg"></p><br><p>绝大部分网站的搜索功能都有所欠缺，因此，更好的方法是通过 Google 等搜索引擎对站内的信息进行搜索。</p><br><p><br>    你只需要在搜索引擎上输入「site:theguardian.com」加上关键词，搜索引擎就会反馈网站「theguardian.com」内和关键词相关的所有条目。如果再结合准确搜索功能，这项功能将会变得更加强大。<br></p><br><p>6、善用星号</p><br><p align="center"><br>    <img height="306" alt="" width="498" src="http://cimage.tianjimedia.com/uploadImages/20160120090325603.jpg"></p><br><p><br>    正如拼图游戏「Scrabble」的空白方块一样，在搜索引擎中，我们可以用星号填补关键词中的缺失部分，不论缺失的是一连串单词的其中一个还是一个单词的某一部分。此外，当你希望搜索一篇确定性偏低的文章时，也可以使用星号填补缺失部分。<br></p><br><p><br>    例如，如果你在搜索引擎中输入「architect*」，你所得到的反馈结果将会是所有包含 architect、architectural、architecture、architected、architecting 以及其他所有以「architect」作为开头的词汇的条目。<br></p><br><p>7、在两个数值之间进行搜索</p><br><p align="center"><br>    <img height="303" alt="" width="498" src="http://cimage.tianjimedia.com/uploadImages/20160120090325874.jpg"></p><br><p><br>    在寻找问题的答案时，一个很好的方法是在一定范围内寻找和关键词相关的资讯。例如想要找出 1920 至 1950 年间的英国首相，直接在搜索引擎中输入「英国首相 1920.. 1950」即可得出想要的结果。<br></p><br><p>记住，数值之间的符号是两个英文句号加一个空格键。</p><br><p>8、在网页标题、链接和主体中搜索关键词</p><br><p align="center"><br>    <img height="338" alt="" width="498" src="http://cimage.tianjimedia.com/uploadImages/20160120090325238.jpg"></p><br><p><br>    有时你或许会遇上找出所有和关键词相关的所有网页标题、链接和网页主体的需求，在这个时候你需要使用的是限定词「inurl:」(供在 url 链接中搜索使用)、「intext:」(供在网页主体中搜索使用)以及「intitle:」(供在网页标题中搜索使用)。<br></p><br><p>例如，在搜索引擎中输入「intitle: 评测」会得到所有和关键词「评测」相关的网页标题。</p><br><p>9、搜索相关网站</p><br><p align="center"><br>    <img height="298" alt="" width="497" src="http://cimage.tianjimedia.com/uploadImages/20160120090325204.jpg"></p><br><p><br>    相关的限定词可用于搜索相关网站时使用。例如，你仅需在搜索引擎中输入「related:theguardian.com」即可得到所有和「theguardian.com」相关的网站反馈结果。<br></p><br><p>10、搜索技能的组合使用</p><br><p align="center"><br>    <img height="337" alt="" width="498" src="http://cimage.tianjimedia.com/uploadImages/20160120090326648.jpg"></p><br><p><br>    你可以对上述所有搜索技能进行组合运用，以便按照自己的意愿缩小或者扩展搜索范围。尽管有些技能或许并不常用，但准确搜索和站内搜索这些技能的使用范围还是相当广泛的。<br></p><br><p><br>    随着 Google 等搜索引擎对于用户自然语言的理解程度与日俱增，这些搜索技能可以派上用场的情况或许将会变得越来越少，至少这是所有搜索引擎共同追求的目标。但是在当下，掌握这些搜索技能还是非常必要的。<br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><br>    在今天，用户可以通过搜索引擎轻松找出自己想要的信息，但还是难以避免结果不尽如人意的情况。实际上，用户仅需掌握几个常用技巧即可轻松化解这种尴尬。下面介绍 10 个在进行 Google 搜索时可以使用的便捷技巧，其他搜索引擎也支持这 10 种技巧。<br></p><br>]]>
    
    </summary>
    
      <category term="google" scheme="http://iamcc.github.io/tags/google/"/>
    
      <category term="search" scheme="http://iamcc.github.io/tags/search/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/tags/tech/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速提高Android开发效率的Web工具]]></title>
    <link href="http://iamcc.github.io/2016/01/21/%E5%BF%AB%E9%80%9F%E6%8F%90%E9%AB%98Android%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84Web%E5%B7%A5%E5%85%B7/"/>
    <id>http://iamcc.github.io/2016/01/21/快速提高Android开发效率的Web工具/</id>
    <published>2016-01-21T06:45:10.000Z</published>
    <updated>2016-01-21T07:23:01.000Z</updated>
    <content type="html"><![CDATA[<p>出自 <a href="http://droidyue.com/blog/2014/08/03/great-web-tools-for-android-development/" target="_blank" rel="external">http://droidyue.com/blog/2014/08/03/great-web-tools-for-android-development/</a></p>
<div class="entry-content"><br>    <p><br>        在Google的广大支持下，便捷开发Android程序的Native工具层出不穷。其实Android开发涉及到的范围也不小，一些Web工具有时候也会带来事半功倍的效果。有些甚至是一些native应用无法做到的。本文，将简单列举一下本人正在使用的一些工具，当然也会持续更新。<br>    </p><br><br>    <a id="more"></a><br><br>    <h2>查找优秀的参考工程</h2><br><br>    <p><br>        codota是一个查找可供参考的Android工程的网站，它的爬虫已经采集了将近7百万个工程。比如我们想要写一段Android中检测网络可用性的代码，我们只需要在搜索框中输入network，就会找到已经存在的优秀工程中关于这一逻辑的具体实现，确实为我们编码节省不少重复造轮子的成本。另外，codeta还有支持Android Studio的插件，让查找源码更快捷。<br>    </p><br><br>    <p><br>        地址:<br>        <a href="http://www.codota.com/" target="_blank">codota,Find Great Code Examples</a><br>    </p><br><br>    <h2>Android军火库</h2><br><br>    <p _hover-ignore="1"><br>        android-arsenal，中文意思 Android军火库，里面收集了Android中的SDK，Library以及Android开发的工具，满满的干货。有木有一种想见恨晚的赶脚，快来加入书签吧。<br>    </p><br><br>    <p><br>        地址:<br>        <a href="http://android-arsenal.com/" target="_blank" _hover-ignore="1"><br>            The Android Arsenal – A categorized directory of free libraries and tools for Android<br>        </a><br>    </p><br><br>    <p>注意https协议的地址稍有问题，建议使用http协议的地址。</p><br><br>    <h2>在线反编译</h2><br><br>    <p><br>        当你还在花时间切换不同的反编译工具时，一个在线反编译网站应运而生，它就是<br>        <a href="http://www.decompileandroid.com/" target="_blank">Android APK Decompiler</a><br>        ，只需上传要反编译的apk包，无需多时，源码可以下载下来了。<br>    </p><br><br>    <p><br>        地址：<br>        <a href="http://www.decompileandroid.com/" target="_blank">Android APK Decompiler</a><br>    </p><br><br>    <h2>Grepcode</h2><br><br>    <p><br>        grepcode.com是一个Java源码搜索引擎，对于查看Android代码也不例外。并且支持多个API版本快速切换查看。如果你的IDE关联本地代码后，让机器累的喘不过气来，那么就试一试这个在线的工具吧。<br>    </p><br><br>    <p><br>        地址：<br>        <a href="http://grepcode.com/search/?query=google+android&amp;entity=project" target="_blank">grepcode.com</a><br>    </p><br><br>    <h2>Android Asset Studio</h2><br><br>    <p><br>        这是一个神奇的网页，里面包含了多个与资源相关的在线工具，比如icon制作（桌面icon，通知栏icon等），9patch图片制作，ActionBar样式等相关的工具。当你有资源相关的工作时，不妨试一试这个网页工具。<br>    </p><br><br>    <p><br>        地址：<br>        <a href="http://romannurik.github.io/AndroidAssetStudio/index.html" target="_blank">Android Asset Studio</a><br>    </p><br><br>    <h2>快速下载Google Play应用</h2><br><br>    <p><br>        由于一些你懂的原因，国内无法直接访问Google Play商店。而且下载Google Play商店还是需要登陆谷歌账户，以国内的网络，下载成功简直是太困难了。<br>        <br>这里介绍一款不需要账户国内即可访问的Web工具。可以通过输入包名或者Google Play地址即可下载。</p><br><br>    <p><br>        地址:<br>        <a href="http://apps.evozi.com/apk-downloader/" target="_blank">APK Downloader</a><br>    </p><br><br>    <h2>进制转换</h2><br><br>    <p><br>        Android中所有的资源都有一个对应的资源ID，资源ID的类型为16进制的整数。有些时候特殊的场合处理资源ID，为了调试需要进行进制转换，比如16进制转常用的10进制。不用自己算，使用下面的工具就可以轻松搞定。<br>    </p><br><br>    <p><br>        地址：<br>        <a href="http://www.binaryhexconverter.com/hex-to-decimal-converter" target="_blank">Hex To Decimal Converter</a><br>    </p><br><br>    <h2>UI相关必备</h2><br><br>    <p><br>        通常UI设计师都会给开花童鞋色值，当疏忽的时候，我们可以使用截图软件得到10进制的三个值，然后将其转换成色值。这里有一个便捷的RGB工具。<br>    </p><br><br>    <p><br>        地址：<br>        <a href="http://www.colorspire.com/rgb-color-wheel/" target="_blank">RGB Color Wheel/</a><br>    </p><br><br>    <h2>JSON格式化</h2><br><br>    <p><br>        在CS应用中，客户端和服务器端通常使用json作为数据交换格式。当分析的时候，我们必然是将raw数据转换成可读性更高的。快来使用这个强大的工具吧。<br>    </p><br><br>    <p><br>        地址：<br>        <a href="http://json.parser.online.fr/" target="_blank">JSON Parser</a><br>    </p><br><br>    <h2>查看HTML5,JS,CSS可用情况</h2><br><br>    <p><br>        caniuse.com是一个检测HTML5，JS，CSS在各个浏览器平台是否可用的web工具。便于我们了解前端方案是否在目标设备上是否有效。<br>    </p><br><br>    <p><br>        地址：<br>        <a href="http://caniuse.com/#search=queryselector" target="_blank">caniuse.com</a><br>    </p><br></div>
]]></content>
    <summary type="html">
    <![CDATA[<p>出自 <a href="http://droidyue.com/blog/2014/08/03/great-web-tools-for-android-development/">http://droidyue.com/blog/2014/08/03/great-web-tools-for-android-development/</a></p>
<div class="entry-content"><br>    <p><br>        在Google的广大支持下，便捷开发Android程序的Native工具层出不穷。其实Android开发涉及到的范围也不小，一些Web工具有时候也会带来事半功倍的效果。有些甚至是一些native应用无法做到的。本文，将简单列举一下本人正在使用的一些工具，当然也会持续更新。<br>    </p><br><br>]]>
    
    </summary>
    
      <category term="android" scheme="http://iamcc.github.io/tags/android/"/>
    
      <category term="tech" scheme="http://iamcc.github.io/tags/tech/"/>
    
      <category term="tools" scheme="http://iamcc.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016]]></title>
    <link href="http://iamcc.github.io/2016/01/20/2016/"/>
    <id>http://iamcc.github.io/2016/01/20/2016/</id>
    <published>2016-01-20T01:06:31.000Z</published>
    <updated>2016-01-21T07:23:09.000Z</updated>
    <content type="html"><![CDATA[<p>2016 想记录点什么。</p>
<a id="more"></a>
<p>但是。。。暂时还不知道要记录什么。😂</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016 想记录点什么。</p>]]>
    
    </summary>
    
      <category term="personal" scheme="http://iamcc.github.io/tags/personal/"/>
    
      <category term="personal" scheme="http://iamcc.github.io/categories/personal/"/>
    
  </entry>
  
</feed>
